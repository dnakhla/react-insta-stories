!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define("Stories",["React"],t):"object"==typeof exports?exports.Stories=t(require("react")):e.Stories=t(e.React)}(this,(function(e){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/dist/index.js",n(n.s=3)}([function(t,n){t.exports=e},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(0)).default.createContext({stories:[],defaultInterval:4e3,width:360,height:640,isPaused:!1});t.default=o},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(0));t.default=o.default.createContext({numArray:[],currentId:0,count:0,currentStory:{url:""},videoDuration:0,bufferAction:!1,pause:!1})},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(0)),a=o(n(4)),s=o(n(1)),u=function(e){i.useEffect(()=>{e.stories.forEach((e,t)=>{let n=[];const r="object"!=typeof e||!e.url||"image"!==e.type&&e.type?"string"==typeof e?e:null:e.url;r&&(n[t]=new Image,n[t].src=r)})},[e.stories]);let t={stories:e.stories.map(e=>"string"==typeof e?{url:e}:e),width:e.width,height:e.height,loader:e.loader,header:e.header,storyStyles:e.storyStyles,loop:e.loop,defaultInterval:e.defaultInterval,isPaused:e.isPaused,currentIndex:e.currentIndex,onStoryStart:e.onStoryStart,onStoryEnd:e.onStoryEnd,onAllStoriesEnd:e.onAllStoriesEnd};return i.default.createElement(s.default.Provider,{value:t},i.default.createElement(a.default,null))};u.defaultProps={width:360,height:640,defaultInterval:4e3},t.default=u},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(0)),a=o(n(1)),s=o(n(2)),u=o(n(5)),l=o(n(12));t.default=function(){const[e,t]=i.useState(0),[n,r]=i.useState(!0),[o,d]=i.useState(0),[f,p]=i.useState(!0),[h,y]=i.useState(0);let m=i.useRef(),g=i.useRef();const{width:v,height:b,defaultInterval:_,stories:x,loop:w,currentIndex:E,isPaused:S,onStoryStart:j,onStoryEnd:M,onAllStoriesEnd:I}=i.useContext(a.default);i.useEffect(()=>(n||(g.current=requestAnimationFrame(O)),()=>{cancelAnimationFrame(g.current)}),[e,n]),i.useEffect(()=>{d(0)},[e,x]),i.useEffect(()=>{"number"==typeof E&&(E>=0&&E<x.length?t(E):console.error("Index out of bounds. Current index was set to value more than the length of stories array.",E))},[E]),i.useEffect(()=>{"boolean"==typeof S&&r(S)},[S]);const O=()=>{d(t=>{0===t&&C();const n=k();return t<100?g.current=requestAnimationFrame(O):(e===x.length-1&&P(),A()),t+100/(n/1e3*60)})},C=()=>{j&&j(e,x[e])},P=()=>{I&&I()},k=()=>"video"===x[e].type?h:"number"==typeof x[e].duration?x[e].duration:_,T=(e,t)=>{r("pause"===e),p(!!t)},A=()=>{let n=!M||M(e,x[e]);w&&n?D():n?(t(n),d(0)):z()},D=()=>{t((e+1)%x.length),d(0)},z=()=>{e<x.length-1&&(t(e+1),d(0))},R=e=>{e.preventDefault(),m.current=setTimeout(()=>{T("pause")},200)},L=(r,o)=>{r.preventDefault(),m.current&&clearTimeout(m.current),n?T("play"):"next"===o?A():e>0&&(t(e-1),d(0))};return i.default.createElement("div",{style:Object.assign(Object.assign({},c.container),{width:v,height:b})},i.default.createElement(s.default.Provider,{value:{bufferAction:f,videoDuration:h,numArray:x.map((e,t)=>t),currentStory:x[e],currentId:e,count:o,pause:n}},i.default.createElement(l.default,null)),i.default.createElement(u.default,{action:T,bufferAction:f,playState:n,story:x[e],getVideoDuration:e=>{y(1e3*e)}}),i.default.createElement("div",{style:c.overlay},i.default.createElement("div",{style:{width:"50%",zIndex:999},onTouchStart:R,onTouchEnd:e=>L(e,"previous"),onMouseDown:R,onMouseUp:e=>L(e,"previous")}),i.default.createElement("div",{style:{width:"50%",zIndex:999},onTouchStart:R,onTouchEnd:e=>L(e,"next"),onMouseDown:R,onMouseUp:e=>L(e,"next")})))};const c={container:{display:"flex",flexDirection:"column",background:"#111",position:"relative"},overlay:{position:"absolute",height:"inherit",width:"inherit",display:"flex"}}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(0)),a=o(n(6)),s=o(n(7)),u=o(n(8)),l=o(n(1)),c={story:{display:"flex",position:"relative",overflow:"hidden"},storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"}};t.default=e=>{const[t,n]=i.useState(!1),[r,o]=i.useState(!1),{width:d,height:f,loader:p,header:h,storyStyles:y}=i.useContext(l.default);i.useEffect(()=>{o(!1),"object"==typeof e.story&&e.story.content?(n(!0),e.action("play",!0)):(n(!1),e.action("pause",!0),m.current&&m.current.addEventListener("waiting",()=>{e.action("pause",!0)}),m.current&&m.current.addEventListener("playing",()=>{e.action("play",!0)}))},[e.story]);let m=i.useRef(null);i.useEffect(()=>{m.current&&(e.playState?m.current.pause():m.current.play().catch(e=>console.log(e)))},[e.playState]);const g=()=>{try{n(!0),e.action("play",!0)}catch(e){console.log(e)}},v=()=>{try{e.getVideoDuration(m.current.duration),m.current&&m.current.play().then(()=>{g()}).catch(t=>{e.action("pause"),console.log(t)})}catch(e){console.log(e)}};let b="object"==typeof e.story&&e.story.header;return i.default.createElement("div",{style:Object.assign(Object.assign({},c.story),{width:d,height:f})},(()=>{let t="object"==typeof e.story&&e.story.content;if(t)return i.default.createElement(t,{action:e.action,isPaused:e.playState});{let t="object"==typeof e.story?e.story.url:e.story,n="object"==typeof e.story&&e.story.styles||y||c.storyContent,r="object"==typeof e.story&&"video"===e.story.type?"video":"image";return"image"===r?i.default.createElement("img",{style:n,src:t,onLoad:g}):"video"===r?i.default.createElement("video",{preload:"auto",ref:m,style:n,src:t,controls:!1,onLoadedData:v,autoPlay:!0,playsInline:!0}):null}})(),b&&i.default.createElement("div",{style:{position:"absolute",left:12,top:20,zIndex:19}},"object"==typeof e.story?h?h(e.story.header):i.default.createElement(a.default,{heading:e.story.header.heading,subheading:e.story.header.subheading,profileImage:e.story.header.profileImage}):null),!t&&i.default.createElement("div",{style:{width:d,height:f,position:"absolute",left:0,top:0,background:"rgba(0, 0, 0, 0.9)",zIndex:9,display:"flex",justifyContent:"center",alignItems:"center",color:"#ccc"}},p||i.default.createElement("div",{className:u.default.spinner})),"object"==typeof e.story&&e.story.seeMore&&i.default.createElement("div",{style:{position:"absolute",margin:"auto",bottom:r?"unset":0,zIndex:9999,width:"100%",height:r?"100%":"auto"}},i.default.createElement(s.default,{action:e.action,toggleMore:t=>{o(t),e.action(t?"pause":"play")},showContent:r,seeMoreContent:e.story.seeMore})))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(0)),i={main:{display:"flex",alignItems:"center"},img:{width:40,height:40,borderRadius:40,marginRight:10,filter:"drop-shadow(0 0px 2px rgba(0, 0, 0, 0.5))",border:"2px solid rgba(255, 255, 255, 0.8)"},text:{display:"flex",flexDirection:"column",filter:"drop-shadow(0 0px 3px rgba(0, 0, 0, 0.9))"},heading:{fontSize:"1rem",color:"rgba(255, 255, 255, 0.9)",margin:0,marginBottom:2},subheading:{fontSize:"0.6rem",color:"rgba(255, 255, 255, 0.8)",margin:0}};t.default=({profileImage:e,heading:t,subheading:n})=>o.default.createElement("div",{style:i.main},e&&o.default.createElement("img",{style:i.img,src:e}),o.default.createElement("span",{style:i.text},o.default.createElement("p",{style:i.heading},t),o.default.createElement("p",{style:i.subheading},n)))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(0));t.default=function(e){const t=e.seeMoreContent;return e.showContent?o.default.createElement("div",{style:i.seeMoreExpanded},o.default.createElement(t,{close:()=>e.toggleMore(!1)})):o.default.createElement("div",{onClick:()=>{e.toggleMore(!0)},style:i.seeMore},o.default.createElement("span",{style:i.seeMoreIcon},"âŒƒ"),o.default.createElement("span",{style:i.seeMoreText},"See more"))};const i={seeMore:{height:"10vh",background:"linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.2))",display:"flex",flexDirection:"column",width:"100%",alignItems:"center",justifyContent:"flex-end",bottom:0},seeMoreExpanded:{position:"absolute",top:0,left:0,width:"100%",height:"100%",boxSizing:"border-box",zIndex:99999},seeMoreText:{color:"white",textAlign:"center",letterSpacing:"0.1em",marginBottom:"2.2vh",textTransform:"capitalize",opacity:"1",fontSize:"0.8em",transition:"opacity 300ms ease-in-out"},seeMoreIcon:{color:"white",textAlign:"center",letterSpacing:"0.2em",marginBottom:"0.4vh",opacity:"1",filter:"drop-shadow(0 0 5px black)",textTransform:"capitalize",transition:"opacity 300ms ease-in-out"},seeMoreClose:{position:"absolute",filter:"drop-shadow(0 3px 2px #ccc)",right:"0.5rem",top:"0.5rem",fontSize:"1.5rem",opacity:"0.7",padding:"1rem"}}},function(e,t,n){var r=n(9),o=n(10);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1},a=(r(o,i),o.locals?o.locals:{});e.exports=a},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],u=t.base?i[0]+t.base:i[0],l=n[u]||0,c="".concat(u," ").concat(l);n[u]=l+1;var d=s(c),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(a[d].references++,a[d].updater(f)):a.push({identifier:c,updater:m(f,t),references:1}),r.push(c)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,d=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,y=0;function m(e,t){var n,r,o;if(t.singleton){var i=y++;n=h||(h=l(t)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=l(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=s(n[r]);a[o].references--}for(var i=u(e,t),l=0;l<n.length;l++){var c=s(n[l]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}n=i}}}},function(e,t,n){(t=n(11)(!1)).push([e.i,"._1CK7FHVwhiOnuCiZJwiPq1 {\n\twidth: 40px;\n\theight: 40px;\n\tmargin: 100px auto;\n\tbackground-color: #fff;\n\n\tborder-radius: 100%;\n\t-webkit-animation: _1hEQ2VzIkTiZ-9jZoLI3JC 1s infinite ease-in-out;\n\tanimation: _1hEQ2VzIkTiZ-9jZoLI3JC 1s infinite ease-in-out;\n}\n\n@-webkit-keyframes _1hEQ2VzIkTiZ-9jZoLI3JC {\n\t0% {\n\t\t-webkit-transform: scale(0);\n\t}\n\t100% {\n\t\t-webkit-transform: scale(1);\n\t\topacity: 0;\n\t}\n}\n\n@keyframes _1hEQ2VzIkTiZ-9jZoLI3JC {\n\t0% {\n\t\t-webkit-transform: scale(0);\n\t\ttransform: scale(0);\n\t}\n\t100% {\n\t\t-webkit-transform: scale(1);\n\t\ttransform: scale(1);\n\t\topacity: 0;\n\t}\n}\n",""]),t.locals={spinner:"_1CK7FHVwhiOnuCiZJwiPq1","sk-scaleout":"_1hEQ2VzIkTiZ-9jZoLI3JC"},e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(u," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,s,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(0)),a=o(n(13)),s=o(n(2));t.default=()=>{const{numArray:e,currentId:t}=i.useContext(s.default);return i.default.createElement("div",{style:u.progressArr},e.map(n=>i.default.createElement(a.default,{key:n,width:1/e.length,active:n===t?1:n<t?2:0})))};const u={progressArr:{display:"flex",justifyContent:"center",maxWidth:"100%",flexWrap:"row",position:"absolute",width:"98%",padding:5,paddingTop:7,alignSelf:"center",zIndex:99,filter:"drop-shadow(0 1px 8px #222)"}}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(0)),a=o(n(14)),s=o(n(2));t.default=e=>{const{bufferAction:t,count:n,pause:r}=i.useContext(s.default),{width:o,active:l}=e;return i.default.createElement(a.default,{width:o,pause:r,bufferAction:t},i.default.createElement("div",{style:Object.assign(Object.assign({},(({active:e})=>{switch(e){case 2:return{width:"100%"};case 1:return{transform:`scaleX(${n/100})`};case 0:default:return{width:0}}})({active:l})),u.inner)}))};const u={inner:{background:"#fff",height:"100%",maxWidth:"100%",borderRadius:2,transformOrigin:"center left",WebkitBackfaceVisibility:"hidden",MozBackfaceVisibility:"hidden",msBackfaceVisibility:"hidden",backfaceVisibility:"hidden",WebkitPerspective:1e3,MozPerspective:1e3,msPerspective:1e3,perspective:1e3}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(0)),i=({width:e,pause:t,bufferAction:n})=>({width:`${100*e}%`,opacity:t&&!n?0:1}),a={progress:{height:2,maxWidth:"100%",background:"#555",margin:2,borderRadius:2,transition:"opacity 400ms ease-in-out"}};t.default=e=>o.default.createElement("div",{style:Object.assign(Object.assign({},a.progress),i(e))},e.children)}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,